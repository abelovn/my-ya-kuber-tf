---
# tasks file for roles/common
- name: Disable auto updates on Ubuntu
  ansible.builtin.copy:
    dest: /etc/apt/apt.conf.d/20auto-upgrades
    content: |
      APT::Periodic::Update-Package-Lists "0";
      APT::Periodic::Unattended-Upgrade "0";
  when: ansible_distribution == 'Ubuntu'

- name: Set hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
    use: "systemd"

- name: Disable swap
  command: swapoff -a
  become: true

- name: Populate and deploy /etc/hosts
  template:
    src: hosts.j2
    dest: /etc/hosts
    owner: root
    group: root
    mode: '0644'

#- name: Install and configure Control-plane
#  include_tasks: master.yaml
#  when: inventory_hostname in groups["masters"]
#
#- name: Install and configure Worker-node
#  include_tasks: worker.yaml
#  when: inventory_hostname in groups["workers"]

- name: Configure kernel modules and sysctl for Kubernetes
  become: yes
  shell: |
    cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
    overlay
    br_netfilter
    EOF

    sudo modprobe overlay
    sudo modprobe br_netfilter

    # sysctl params required by setup, params persist across reboots
    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
    EOF

    # Apply sysctl params without reboot
    sudo sysctl --system
  args:
    executable: /bin/bash

#- name: Add Kubernetes repository GPG key
#  ansible.builtin.apt_key:
#    url: https://pkgs.k8s.io/core:/stable:/v1.26/deb/Release.key
#    state: present
#
#- name: Add Kubernetes repository
#  ansible.builtin.apt_repository:
#    repo: 'deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main'
#    state: present
#    filename: 'kubernetes'

- name: Install containerd
  become: true
  apt:
    name: containerd
    update_cache: yes
    state: present


- name: Ensure containerd configuration directory exists
  file:
    path: /etc/containerd
    state: directory
    mode: "0755"

- name: Configure containerd
  become: true
  shell: |
    mkdir -p /etc/containerd
    containerd config default | sudo tee /etc/containerd/config.toml
  args:
    executable: /bin/bash

- name: Ensure containerd is restarted and enabled
  systemd:
    name: containerd
    state: restarted
    enabled: yes

- name: Verify kernel modules are loaded
  command: lsmod
  register: lsmod_output
  changed_when: false

- name: Check br_netfilter module
  assert:
    that:
      - "'br_netfilter' in lsmod_output.stdout"
    fail_msg: "The br_netfilter module is not loaded"
    success_msg: "The br_netfilter module is loaded successfully"

- name: Check overlay module
  assert:
    that:
      - "'overlay' in lsmod_output.stdout"
    fail_msg: "The overlay module is not loaded"
    success_msg: "The overlay module is loaded successfully"

- name: Verify sysctl parameters
  command: sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
  register: sysctl_output
  changed_when: false

- name: Check sysctl parameters are set correctly
  assert:
    that:
      - "'net.bridge.bridge-nf-call-iptables = 1' in sysctl_output.stdout"
      - "'net.bridge.bridge-nf-call-ip6tables = 1' in sysctl_output.stdout"
      - "'net.ipv4.ip_forward = 1' in sysctl_output.stdout"
    fail_msg: "Sysctl parameters are not set correctly"
    success_msg: "Sysctl parameters are set correctly"

- name: Update the apt package index
  ansible.builtin.apt:
    update_cache: yes

- name: Install required packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
    state: present

- name: Ensure /etc/apt/keyrings directory exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

#- name: Download and add the Kubernetes package signing key
#  ansible.builtin.get_url:
#    url: https://pkgs.k8s.io/core:/stable:/v1.26/deb/Release.key
#    dest: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
#    mode: '0644'

- name: Add Kubernetes repository GPG key
  ansible.builtin.apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
    state: present
    keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add the Kubernetes apt repository
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list.d/kubernetes.list
    line: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
    create: yes

- name: Update apt package index with the new repository
  ansible.builtin.apt:
    update_cache: yes

- name: Install kubelet, kubeadm, and kubectl
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present

- name: Pin kubelet, kubeadm, and kubectl to prevent automatic updating
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: no
    dpkg_options: 'hold'
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Configure systemd as cgroup driver for kubelet
  become: yes
  copy:
    content: |
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      cgroupDriver: systemd
    dest: /var/lib/kubelet/config.yaml
    owner: root
    group: root
    mode: '0644'


- name: Ensure the containerd config contains the required systemd cgroup setting
  block:
    - name: Check if SystemdCgroup setting exists
      ansible.builtin.shell: >
        grep -q 'SystemdCgroup = true' /etc/containerd/config.toml
      register: systemd_cgroup_check
      failed_when: false
      changed_when: false

#    - name: Insert SystemdCgroup setting under the runc options
#      ansible.builtin.lineinfile:
#        path: /etc/containerd/config.toml
#        insertafter: '\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]'
#        line: '          SystemdCgroup = true'
#        create: no
#      when: systemd_cgroup_check.rc != 0
#
#    - name: Restart containerd to apply changes
#      ansible.builtin.systemd:
#        name: containerd
#        state: restarted
#      when: systemd_cgroup_check.rc != 0
#

#- name: Configure systemd as the cgroup driver for containerd
#  become: yes
#  blockinfile:
#    path: /etc/containerd/config.toml
#    block: |
#      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
#        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
#          SystemdCgroup = true
#    marker: "# {mark} ANSIBLE MANAGED BLOCK"
#  #notify: restart containerd
#

- name: Replace containerd configuration with a specific setting
  ansible.builtin.copy:
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: '0644'
    content: |
      version = 2
      [plugins]
        [plugins."io.containerd.grpc.v1.cri"]
          [plugins."io.containerd.grpc.v1.cri".containerd]
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                runtime_type = "io.containerd.runc.v2"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                  SystemdCgroup = true
#  notify:
#    - restart containerd
#

- name: Restart containerd to apply new configuration
  become: yes
  ansible.builtin.systemd:
    name: containerd
    state: restarted
    enabled: yes


- name: Verify kubelet cgroup driver configuration
  command: "grep 'cgroupDriver: systemd' /var/lib/kubelet/config.yaml"
  register: kubelet_cgroup_check
  failed_when: kubelet_cgroup_check.rc != 0



- name: Verify containerd cgroup driver configuration
  command: grep 'SystemdCgroup = true' /etc/containerd/config.toml
  register: containerd_cgroup_check
  failed_when: containerd_cgroup_check.rc != 0


#- name: Configure containerd for Flannel CNI
#  block:
#    - name: Set CNI plugin directory in containerd config
#      ansible.builtin.lineinfile:
#        path: /etc/containerd/config.toml
#        regexp: '^(\s*\[plugins."io.containerd.grpc.v1.cri".cni\])'
#        line: '\1\n  bin_dir = "/opt/cni/bin"'
#        insertafter: '^\[plugins."io.containerd.grpc.v1.cri"\]'
#        state: present
#
#    - name: Set CNI config directory in containerd config
#      ansible.builtin.lineinfile:
#        path: /etc/containerd/config.toml
#        regexp: '^(\s*\[plugins."io.containerd.grpc.v1.cri".cni\])'
#        line: '\1\n  conf_dir = "/etc/cni/net.d"'
#        insertafter: '^\[plugins."io.containerd.grpc.v1.cri"\]'
#        state: present
#
#  notify: restart containerd
